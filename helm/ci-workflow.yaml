apiVersion: v1
kind: ConfigMap
metadata:
 name: synchronization-config
data:
  workflow: "10"  # only 10 workflow(s) can run at a time in a namespace
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: github-ci-template
  namespace: argo
spec:
  serviceAccountName: argo-workflow
  synchronization:
    semaphores:
      - configMapKeyRef:
          name: synchronization-config
          key: workflow
  templates:
    - name: go-ci
      inputs:
        parameters:
          - name: repo
          - name: registry
          - name: version
          - name: image
          - name: revision
          - name: email
      steps:
        - - name: build
            template: build
            arguments:
              parameters:
                - name: repo
                  value: '{{inputs.parameters.repo}}'
                - name: image
                  value: '{{inputs.parameters.image}}'
                - name: revision
                  value: '{{inputs.parameters.revision}}'
        - - name: test
            template: test
            arguments:
              parameters:
                - name: repo
                  value: '{{inputs.parameters.repo}}'
                - name: image
                  value: '{{inputs.parameters.image}}'
        - - name: publish
            template: publish
            arguments:
              parameters:
                - name: repo
                  value: '{{inputs.parameters.repo}}'
                - name: registry
                  value: '{{inputs.parameters.registry}}'
                - name: version
                  value: '{{inputs.parameters.version}}'
        - - name: tag
            template: tag
            arguments:
              parameters:
                - name: repo
                  value: '{{inputs.parameters.repo}}'
                - name: version
                  value: '{{inputs.parameters.version}}'
                - name: revision
                  value: '{{inputs.parameters.revision}}'
                - name: email
                  value: '{{inputs.parameters.email}}'
    - name: build
      inputs:
        parameters:
          - name: repo
          - name: image
          - name: revision
        artifacts:
          - name: code
            path: '/workdir/{{inputs.parameters.repo}}'
            git:
              repo: 'https://github.com/{{inputs.parameters.repo}}.git'
              revision: '{{inputs.parameters.revision}}'
              usernameSecret:
                name: git-creds
                key: username
              passwordSecret:
                name: git-creds
                key: password
      container:
        image: '{{inputs.parameters.image}}'
        command:
          - sh
          - '-c'
        args:
          - 'cd /workdir/{{inputs.parameters.repo}} && make build'
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    - name: test
      inputs:
        parameters:
          - name: repo
          - name: image
      container:
        image: '{{inputs.parameters.image}}'
        command:
          - sh
          - '-c'
        args:
          - 'cd /workdir/{{inputs.parameters.repo}}; make test'
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    - name: publish
      inputs:
        parameters:
          - name: repo
          - name: registry
          - name: version
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - '--context=/workdir/{{inputs.parameters.repo}}'
          - '--dockerfile=/workdir/{{inputs.parameters.repo}}/Dockerfile'
          - '--destination={{inputs.parameters.registry}}/{{inputs.parameters.repo}}:{{inputs.parameters.version}}'
          - '--insecure'
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    - name: tag
      inputs:
        parameters:
          - name: repo
          - name: version
          - name: revision
          - name: email
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            set -e
            git config --global user.name "${GIT_USERNAME}"
            git config --global user.email "{{inputs.parameters.email}}"
            git clone "https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/{{inputs.parameters.repo}}.git" repo
            cd repo
            if git rev-parse "{{inputs.parameters.version}}" >/dev/null 2>&1; then
              echo "Tag {{inputs.parameters.version}} already exists. Skipping push."
            else
              git tag -a "{{inputs.parameters.version}}" "{{inputs.parameters.revision}}" -m "Tagging commit {{inputs.parameters.revision}} as {{inputs.parameters.version}}"
              git push origin "{{inputs.parameters.version}}"
            fi
        env:
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: git-creds
                key: username
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-creds
                key: password
  entrypoint: go-ci
  arguments:
    parameters:
      - name: repo
        value: kevinkowalew/auth-server
      - name: version
        value: 0.0.3
      - name: registry
        value: homelab-docker-registry:5000
      - name: image
        value: golang:1.19
      - name: revision
        value: commit-hash-sha
      - name: email
        value: john.doe@gmail.com
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
